{"summaries:376c9d82630f8dd7a6c42a3c5eee81682a3ef050":{"changes":[{"type":"feature","description":"Implemented logic to handle GitHub repositories other than the primary one. This includes modifications in `generate-report.use-case.ts` and `summarize-commits.use-case.ts` to accommodate different repository inputs. New utility functions were added in `utils.ts` to support the new functionality."}],"summary":"This commit introduces a new feature that enables the application to handle GitHub repositories beyond the main one. The changes involve modifications in `generate-report.use-case.ts` and `summarize-commits.use-case.ts` to support input from multiple repositories and new functions in `utils.ts` to help with the new logic. The commit aimed to expand the application's capacity for interacting with diverse github repositories.","called_tools":[]},"summaries:eda065268572f540aec9de0bff7f5363a0c0e758":{"changes":[{"type":"refactor","description":"The commit refactors the `index.ts` file by extracting menu-related logic into a dedicated `menu.service.ts` file. This involves removing menu data and functions from `index.ts` and creating a new `MenuService` class in `menu.service.ts`. The `index.ts` file now imports and uses this service for menu-related operations. The `MenuService` includes methods for getting all menu items and a single menu item by ID."}],"summary":"This commit refactors the codebase by moving menu-related logic from `index.ts` to a new `menu.service.ts` file. This improves code organization and maintainability by encapsulating menu data and functionality within a dedicated service class. The `index.ts` file now uses this service, simplifying its responsibilities.","called_tools":[{"name":"file_diffs_tool","description":"The file diff tool was called to get the changes of the `index.ts` file to understand the changes made in that file.","called_at":"2024-07-15T16:01:48"},{"name":"file_diffs_tool","description":"The file diff tool was called to get the changes of the `services/menu.service.ts` file to understand the changes made in that file.","called_at":"2024-07-15T16:01:48"}]},"summaries:5c8900fefb3be73a58b3d0b18acc1ff082c5d195":{"changes":[{"type":"refactor","description":"The commit refactors the `index.ts` file by extracting its functionality into separate use case files: `generate-report.use-case.ts` and `summarize-commits.use-case.ts`. The original `index.ts` file was significantly reduced in size, with most of its code moved to the new use case files. The use cases were also refactored to use a progress bar service for better user feedback."}],"summary":"This commit introduces a significant refactoring of the main `index.ts` file. Instead of containing all the core logic, the file is now split into two use cases, `generate-report.use-case.ts` and `summarize-commits.use-case.ts`. These files now handle the core business logic of report generation and commit summarization. The use cases now also utilize a progress bar service, which improves the user experience by providing feedback during long running operations. This refactor improves the project structure by breaking down a large file into smaller, more manageable parts with single responsibilities and promotes code reuse and testability.","called_tools":[]},"summaries:f09934adfe8ece7d22efce8a427f90543703cde0":{"changes":[{"type":"feature","description":"A new progress bar service was added. This service will be responsible for managing and updating the state of progress bars in the application. The service is implemented in the `services/progress.service.ts` file and the necessary configurations were added to the `package.json` file"}],"summary":"This commit introduces a new progress bar service to the application. The service, implemented in `services/progress.service.ts`, is intended to manage the state and updates of progress bars within the application. The addition of the service also involved modifying the `package.json` file to include relevant configurations. This feature allows for more structured and centralized handling of progress updates, improving code organization and potentially reusability of progress bar logic.","called_tools":[{"name":"file_diffs_tool","description":"The file diff tool was called to analyze the changes in the 'services/progress.service.ts' file, which contains the implementation of the progress bar service.","called_at":"now"}]},"summaries:834899d9223493b1d749dcc1b892fa05929dddcc":{"changes":[{"type":"fix","description":"The commit fixes an issue in the json store factory. The exact nature of the fix is detailed in the code diffs, which involve modifications to the `create` method, likely addressing a bug or improving its functionality. The changes involve both insertions and deletions, indicating a modification rather than a simple addition. The goal was to correct some behaviour in the creation of the store."}],"summary":"This commit addresses a bug in the json store factory, specifically within the `create` method. The changes include both insertions and deletions, demonstrating that existing code was modified. The overall aim was to rectify a problem, ultimately improving the factory's behavior and reliability.","called_tools":[{"name":"file_diffs_tool","description":"The file_diffs_tool was called to get the code changes of the file `json-store.factory.ts`.","called_at":"2024-08-02 15:50:59"}]},"summaries:4d8e5e111a5010a41752bf8798bec2cf7ec1c009":{"changes":[{"type":"refactor","description":"Refactored the report AI generator prompt logic. This involved changes to how the prompt is constructed and used in the report generation process. The changes are mainly focused on the `reportAIGenerator.ts` and `reportGenerator.ts` files."}],"summary":"This commit refactors the report AI generator prompt. The most significant changes are in `reportAIGenerator.ts` where 27 lines were inserted and 11 deleted, and `reportGenerator.ts` where all 50 lines were deleted. Additionally, there were minor changes in cache files `.cache.json`, `report-generation-appcache.json`, `spitha-blog'cache.json`, and `spitha-blog-cache.json`.  A new line was added in `json-local-cache.ts`.","called_tools":[]},"summaries:680424a4e3b960df38a8ba70c48ddf28d7b1fc46":{"changes":[{"type":"feature","description":"Introduced a new factory for creating JSON stores. This factory, implemented in `json-store.factory.ts`, provides a centralized way to instantiate JSON stores. This improves code organization and maintainability by encapsulating the creation logic. The factory pattern allows for easier extension and modification of how JSON stores are created without affecting other parts of the application."},{"type":"refactor","description":"Modified the `index.ts` file to use the new `JsonStoreFactory` instead of directly creating JSON stores. This refactoring centralizes the instantiation of JSON stores and leverages the newly created factory pattern. This change resulted in a deletion of 8 lines and insertion of 4 lines in the index.ts, indicating that the older code was replaced to use the factory."}],"summary":"This commit introduces a `JsonStoreFactory` to centralize the creation of JSON stores. The new factory pattern improves code organization and maintainability by encapsulating the instantiation logic, making it easier to modify or extend the creation process without impacting other parts of the application. The `index.ts` file has been refactored to utilize the new factory.","called_tools":[{"name":"file_diffs_tool","description":"The file_diffs_tool was called because the commit included changes in multiple files and it was required to analyze the code changes in order to provide a complete summary","called_at":"2024-09-18T11:00:00Z"}]},"summaries:8b3c06bc20e6644582529ef1adb0ce12b6f8555c":{"changes":[{"type":"fix","description":"Multiple bug fixes were implemented across several files. Specifically, there were fixes in '.cache.json' involving one insertion and one deletion, in 'commitFetcher.ts' where four insertions and one deletion occurred, in 'index.ts' with fifteen insertions and sixteen deletions, in 'json-local-cache.ts' with eight insertions and five deletions, in 'schemas.ts' with one insertion and one deletion, and finally in 'use-cases/generate-report.use-case.ts' with three insertions. There was also one insertion in 'spitha-blog'cache.json'"}],"summary":"This commit addresses multiple bug fixes across various files. The changes include modifications in caching logic, commit fetching, core application logic, JSON local caching, schema definitions, and report generation. Specifically, '.cache.json' had minor adjustments, 'commitFetcher.ts' saw improvements in its commit fetching functionality, 'index.ts' underwent significant corrections, 'json-local-cache.ts' received updates to its caching mechanisms, 'schemas.ts' had a minor adjustment, 'spitha-blog'cache.json was updated and 'use-cases/generate-report.use-case.ts' was updated to improve the report generation process. These changes collectively aim to stabilize the application and address reported issues.","called_tools":[]},"summaries:79c5ac4b1d66ab2d700ce27711ae9c5580796a8d":{"changes":[{"type":"feature","description":"Implemented the core logic for the AI report generator. This includes fetching commit data, processing it using AI, and generating a summary. The changes also incorporate a local JSON cache to improve performance. The main implementation is located in the 'reportAIGenerator.ts' file, which handles the core logic of generating a report using AI, while 'commitFetcher.ts' is responsible for fetching the commit information."},{"type":"feature","description":"Added caching mechanisms using 'json-local-cache.ts', this allows the application to store the response from the AI to avoid making unecessary calls to the AI."}],"summary":"This commit introduces the initial implementation of the AI-powered report generator. It includes the core logic for fetching commits, processing them with AI to generate summaries, and leveraging a local JSON cache to optimize performance. The 'reportAIGenerator.ts' file houses the core AI-driven report generation logic. The 'commitFetcher.ts' is responsible for retrieving the commit data from the git log. Several other files were modified to ensure correct functionality, including the schemas and prompts which are needed for the AI to work correctly, 'index.ts' which now initializes the report generator, and 'json-local-cache.ts' which provides the caching logic.","called_tools":[{"name":"file_diffs_tool","description":"Used to get the diffs from the 'reportAIGenerator.ts' file to understand the main implementation logic.","called_at":"2024-04-29T15:48:10Z"},{"name":"file_diffs_tool","description":"Used to get the diffs from the 'commitFetcher.ts' file to understand how the commit information is being fetched.","called_at":"2024-04-29T15:48:10Z"},{"name":"file_diffs_tool","description":"Used to get the diffs from the 'json-local-cache.ts' file to understand how the cache is being implemented.","called_at":"2024-04-29T15:48:10Z"}]},"summaries:ee0cc17b3e2bb9bf1da4547e7b1cd2eeb71cf9af":{"changes":[{"type":"refactor","description":"The commit refactors the index.ts file by moving its code into separate files. This includes moving code related to fetching commits into commitFetcher.ts, prompts related code into prompts.ts and also defining types into types.ts. This greatly reduces the size of index.ts file by moving a lot of code into dedicated files."}],"summary":"This commit refactors the index.ts file by separating its functionalities into dedicated files. The code related to fetching commits is moved into 'commitFetcher.ts', prompts are moved to 'prompts.ts', and type definitions are moved to 'types.ts'. This refactoring significantly reduces the size and complexity of the 'index.ts' file, leading to better code organization and maintainability.","called_tools":[]},"summaries:bca819682609cdac9083222053b67b88b7be9bf5":{"changes":[{"type":"feature","description":"Implemented filtering of commits by username and date range. This feature allows users to specify their preferred filters through prompts, enabling them to narrow down the commit history based on these criteria."}],"summary":"This commit introduces a new feature that enables users to filter commit data based on username and date range. The filtering options are presented to the user via prompts, allowing for a customizable filtering experience. This enhancement provides a more targeted and efficient way to analyze commit history, enabling users to focus on relevant commits based on specific criteria.","called_tools":[]},"summaries:a5259840d8578d35df8a0dcfb8eebae7fd28dbf2":{"changes":[{"type":"fix","description":"The commit addresses an issue with stderr handling. Specifically, it modifies how error messages from child processes are captured and displayed. The changes in `commitFetcher.ts` involve adjustments to the process execution logic, ensuring that error messages are correctly retrieved from stderr streams. The changes also involves an update to the index.ts file to adapt to the changes in `commitFetcher.ts`."}],"summary":"This commit focuses on improving the robustness of error handling, specifically concerning stderr streams from child processes. The core of the fix lies in `commitFetcher.ts`, which has undergone significant modifications to ensure accurate capture and display of error messages. The changes in `index.ts` adapt the main program to the new error handling implemented in `commitFetcher.ts`. These adjustments collectively enhance the user experience by providing more informative error feedback when issues occur during commit fetching.","called_tools":[{"name":"file_diffs_tool","description":"The tool was called to get the diffs of the file commitFetcher.ts to analyze the code changes in order to provide a detailed description of the changes in the commit.","called_at":"2024-01-23T18:05:00"},{"name":"file_diffs_tool","description":"The tool was called to get the diffs of the file index.ts to analyze the code changes in order to provide a detailed description of the changes in the commit.","called_at":"2024-01-23T18:05:05"}]},"summaries:f22e013234f2bf45265516337cc1314bbfe8222f":{"changes":[{"type":"fix","description":"The commit modifies the path parameter to support local repositories, updating the commitFetcher, commitSummary, and commitAIProcessorAgent files. The changes in commitFetcher involve adjusting how the repository path is resolved to work with local paths. commitSummary was updated to remove a parameter that was not required. The commitAIProcessorAgent was modified to correctly parse local paths, ensuring that the correct repository is used when generating a summary. The index file was updated to reflect the changes in the files above. All these changes fix an issue where local repositories were not handled correctly."}],"summary":"This commit addresses an issue where local repositories were not being handled correctly. The changes modify the path parameter across several files (commitFetcher, commitSummary, commitAIProcessorAgent and index), allowing the application to correctly resolve and process local repository paths. This fix ensures that the tool now supports both remote and local repositories, enabling users to analyse commit data from various sources.","called_tools":[]},"summaries:bb77878c573bbd59f069a1d10fb59dbec2492696":{"changes":[{"type":"refactor","description":"The commit refactors the fetching logic and the Commit AI Processor. The Commit AI Processor is transformed into an agent-based model with tools, which involves creating a new file `commitAIProcessorAgent.ts` and removing the old implementation in `commitAIProcessor.ts`. The fetching logic is updated in `commitFetcher.ts`."}],"summary":"This commit focuses on a significant refactoring of the codebase. It introduces an agent-based approach for the Commit AI Processor, moving away from the previous implementation. This change is reflected in the creation of `commitAIProcessorAgent.ts` and the removal of code from `commitAIProcessor.ts`. The fetching logic was also refactored in `commitFetcher.ts`. Additionally, several supporting files were modified, including `commitSummary.ts`, `index.ts`, `json-local-cache.ts`, `package.json`, `schemas.ts`, `types/commit.ts` and `utils.ts`. The refactoring aims to enhance the modularity and maintainability of the code, introducing an agent based pattern.","called_tools":[]},"reports:2024-12-22":{"date":"2024-12-22T00:00:00Z","bulletPoints":[{"short":"Support for Multiple Repositories","long":"The application can now analyze and generate reports from multiple GitHub repositories, not just the main one. This allows for broader project insights and reporting capabilities."},{"short":"Improved Report Generation with AI","long":"We've added a new AI-powered feature that helps generate more detailed and insightful reports by summarizing commits using AI. This should significantly improve the quality and usefulness of our reports, making them easier to understand."},{"short":"Faster Report Generation","long":"A caching system has been implemented to save processed data. This means that the application can now run faster and more efficiently, particularly for frequently accessed information. This will save time and provide a better user experience."},{"short":"Clearer Display of Progress","long":"A progress bar has been added to the application. This gives users better feedback during long processes by showing how far along the application is, making it easier to follow along with the processes."},{"short":"More Organized Code for Menu Options","long":"The way the application handles menus has been reorganized, making the code easier to understand and maintain, and making the code more adaptable to changes. This change is not directly user-facing but will contribute to more reliable updates and future improvements."},{"short":"Core Application Logic Streamlined","long":"The main part of the application has been broken down into smaller, more manageable components, resulting in improved code structure and maintainability. This change will help in further development of the product, and provide a better basis for improving and expanding existing functionality."},{"short":"Better Handling of Data Storage","long":"A new system has been created to centralize the way the application saves and stores data. The system should make the app more stable and secure."},{"short":"Bug Fixes and Improvements","long":"Multiple reported bugs have been fixed, leading to a more reliable and stable application. This will result in a better user experience with less issues and a better chance of the application running correctly."},{"short":"Improved AI Prompt","long":"The prompt that is sent to the AI has been improved. This is to make sure the AI has the correct instructions, leading to a better and more precise output."}]},"reports:2024-12-21":{"date":"2024-12-21T00:00:00Z","bulletPoints":[{"short":"Improved code structure","long":"The way the underlying code is organized has been improved. This makes it easier for developers to work with and maintain the system. This is like tidying up a messy room – it’s now much easier to find things."},{"short":"Filtering options added","long":"Users can now filter commit data by username and date range. This makes it much faster and easier to find the specific information they need, like looking for specific transactions in a bank statement."},{"short":"Better error messages","long":"The system now provides clearer and more helpful error messages when something goes wrong during commit fetching. This makes it easier for users to understand what went wrong and resolve any problems, similar to getting a specific error message when a website has an issue."},{"short":"Support for local repositories","long":"The tool can now analyse commit history from local repositories in addition to remote ones. This means users are not limited to remote repositories and can analyse any repo stored on their computer, as if using the tool on a document stored locally versus online."},{"short":"New processing method","long":"The way commit data is processed has been changed, using an 'agent-based' approach. This is a more flexible and robust method for processing the data, like switching from manual data entry to using an automated software."}]},"summaries:bb985518d494d5c5fa5b20ea14f197f00a731a60":"{\"changes\":[{\"type\":\"feature\",\"description\":\"A new LICENSE file was created in the repository.\"}],\"summary\":\"This commit introduces a new LICENSE file to the repository. The file was created with 21 lines inserted and 0 lines deleted. This commit adds a license to the repository, which is a crucial step for open-source projects to define the terms of use and distribution.\",\"called_tools\":[]}","summaries:626908b3d32bea26f055ff4aa7fdfeabad330f75":"{\"changes\":[{\"type\":\"feature\",\"description\":\"Added initial commit fetching functionality to the application. This includes fetching commit data, diffs, and generating commit summaries.\"},{\"type\":\"feature\",\"description\":\"Implemented report generation functionality, allowing for the creation of reports based on fetched commit data.\"},{\"type\":\"feature\",\"description\":\"Added a basic commit summary functionality that will be extended in the future.\"}],\"summary\":\"This commit introduces the core functionality for fetching commit data, generating diffs, creating basic commit summaries, and generating reports. The changes include modifications to `.gitignore`, the creation of `commitAIProcessor.ts` for processing commits, `commitSummary.ts` for summarizing commits, and `reportGenerator.ts` for generating reports. The commit also includes modifications to `index.ts`, `package.json`, and `pnpm-lock.yaml` to support the new functionality. The commit is marked as a work in progress (wip), indicating further development is expected.\",\"called_tools\":[]}","summaries:13833e8c013bd70581f954ad57081a8139ca9849":"{\"changes\":[{\"type\":\"feature\",\"description\":\"Initial commit of the project. This includes setting up the basic project structure, initial code files, and configuration files. The commit introduces the following files: .gitignore, commitAIProcessor.ts, commitFetcher.ts, commitSummary.ts, index.ts, package.json, pnpm-lock.yaml, tsconfig.json, and types/commit.ts.\"}],\"summary\":\"This commit initializes the project with the basic structure, code files, and configuration files. The files added include: .gitignore, which specifies intentionally untracked files that Git should ignore; commitAIProcessor.ts, which likely handles processing of commit messages using AI; commitFetcher.ts, which likely retrieves commit information; commitSummary.ts, which likely generates summaries of commits; index.ts, which serves as the main entry point; package.json, which specifies project metadata and dependencies; pnpm-lock.yaml, which locks dependencies to specific versions; tsconfig.json, which configures TypeScript compiler options; and types/commit.ts, which defines types related to commits. This commit represents the initial setup of the project.\",\"called_tools\":[]}","reports:2024-12-17":{"date":"2024-12-17T00:00:00Z","bulletPoints":[{"short":"Project Initialized","long":"The project has been set up with all the basic files and structure needed to start development. This is like laying the foundation for a house - everything is ready for us to build on."},{"short":"Terms of Use Established","long":"A license has been added to the project. This is important because it clarifies how others can use and share our work. It protects both our rights and the rights of our users."},{"short":"Commit Tracking and Reporting Launched","long":"The system now has the core ability to track, analyze, and summarize changes made to the code. This means we can now easily monitor progress, understand what's changing, and generate reports. This functionality is still under development but already provides a basis for progress visibility."}]}}