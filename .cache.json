{"summaries:79c5ac4b1d66ab2d700ce27711ae9c5580796a8d":{"changes":[{"type":"feature","description":"Implemented the AI report generator functionality. This includes creating a new `reportAIGenerator.ts` file with the core logic for generating AI-powered reports, modifying `index.ts` to incorporate this new functionality, updating `commitAIProcessorAgent.ts` to use the new report generation, and adjusting related modules like `json-local-cache.ts`, `prompts.ts`, and `reportGenerator.ts`. Additionally, new schemas related to the report generation were added in schemas.ts, and some utilities were adjusted in utils.ts. Several files experienced changes including `commitFetcher.ts` and `commitSummary.ts`."}],"summary":"This commit introduces a significant new feature: an AI-powered report generator. The core logic resides in `reportAIGenerator.ts`, which leverages other modules to generate reports based on commit data. The `index.ts` file was heavily modified to incorporate this new feature. Several other files were changed such as `commitAIProcessorAgent.ts`, `json-local-cache.ts`, `prompts.ts`, `reportGenerator.ts` to make the new AI report generator work as expected. The commit also adds new schemas in `schemas.ts` and makes some adjustments in the utils.ts file. Several changes were also added in `commitFetcher.ts` and `commitSummary.ts`. This commit signifies a major step towards automating report generation using AI.","called_tools":[]},"summaries:ee0cc17b3e2bb9bf1da4547e7b1cd2eeb71cf9af":{"changes":[{"type":"refactor","description":"The commit refactors the index.ts file by moving its code into separate files. This involved moving code related to fetching commits to `commitFetcher.ts`, creating `prompts.ts` for managing prompts, and creating `types.ts` for managing types. The original `index.ts` file is now primarily responsible for orchestrating the application."}],"summary":"This commit refactors the `index.ts` file by separating its code into multiple files. The commit moves code related to fetching commits to `commitFetcher.ts`, creates `prompts.ts` for managing prompts, and creates `types.ts` for managing types. This improves code organization and maintainability by separating concerns. The `index.ts` file now primarily orchestrates the application. The changes also includes a significant reduction of code in `index.ts` (81 deletions and 3 insertions) and addition of 68 new lines of code to `prompts.ts` and 11 new lines of code to `types.ts` and minor changes to `commitFetcher.ts` with 5 deletions and 2 insertions.","called_tools":[]},"summaries:bca819682609cdac9083222053b67b88b7be9bf5":{"changes":[{"type":"feature","description":"Implemented filtering of commits by username and date range. The filtering options are presented to the user as prompts, allowing them to select their preferred filters. This feature enhances the ability to search and refine commit history based on specific criteria."}],"summary":"This commit introduces a new feature that enables users to filter commits by username and date range. The user is prompted to specify their desired filters, providing a flexible way to narrow down the commit history. The changes are primarily in `commitFetcher.ts` and `index.ts`, which include the implementation of the filtering logic and user prompts. There are also some minor updates in `package.json` and `pnpm-lock.yaml`.","called_tools":[]},"summaries:a5259840d8578d35df8a0dcfb8eebae7fd28dbf2":{"changes":[{"type":"fix","description":"The commit addresses an issue with how stderr was being handled. The changes primarily focus on the 'commitFetcher.ts' file, which saw a total of 112 changes, including 73 insertions and 39 deletions. The 'index.ts' file also had minor adjustments with 6 total changes, involving 2 insertions and 4 deletions. The modifications in 'commitFetcher.ts' likely resolve problems related to error stream processing during commit fetching operations, ensuring more robust handling of error messages. The changes in 'index.ts' probably support the fix by adapting how it uses the commit fetcher."}],"summary":"This commit primarily focuses on improving error handling, specifically related to stderr. The core of the fix is in 'commitFetcher.ts', where significant modifications have been made to correctly manage and process error messages during commit fetching. Minor supportive changes have also been implemented in 'index.ts'. This enhancement aims to provide more reliable error reporting, making the overall system more stable and user-friendly.","called_tools":[]},"summaries:f22e013234f2bf45265516337cc1314bbfe8222f":{"changes":[{"type":"fix","description":"The commit modifies the path parameter used to fetch commits to support different local repositories. The changes include modifications to `commitAIProcessorAgent.ts`, `commitFetcher.ts`, `commitSummary.ts`, and `index.ts`. Specifically, the changes in `commitAIProcessorAgent.ts` involve adjusting how the repository path is utilized, suggesting an alteration in the way the tool handles repository locations. The modifications in `commitFetcher.ts` and `commitSummary.ts` also seem to be related to accommodating different repository paths, and `index.ts` likely manages the entry point where these changes are integrated. The overall goal of these changes is to enhance the tool's capability to work with diverse local repository configurations."}],"summary":"This commit addresses an issue regarding the path parameter used for fetching commits, enabling the tool to support various local repositories. The modifications are spread across four files (`commitAIProcessorAgent.ts`, `commitFetcher.ts`, `commitSummary.ts`, and `index.ts`) and are related to how the repository path is handled. The objective of these modifications is to improve the tool's flexibility by allowing it to operate with a wider variety of repository setups, indicating an improvement to its general applicability.","called_tools":[]},"summaries:bb77878c573bbd59f069a1d10fb59dbec2492696":{"changes":[{"type":"refactor","description":"The commit refactors the fetching logic by moving the responsibility of fetching commits from `commitAIProcessor.ts` to `commitFetcher.ts` and also the `commitAIProcessor.ts` was refactored to an agent base model `commitAIProcessorAgent.ts` with tools. This includes the creation of a new file `commitAIProcessorAgent.ts` and `json-local-cache.ts`, alongside with modifications on existing files such as `commitFetcher.ts`, `commitSummary.ts`, `index.ts`, `package.json`, `schemas.ts`, `types/commit.ts`, and `utils.ts`."}],"summary":"This commit focuses on refactoring the commit processing logic. The primary change involves decoupling the fetching of commit data from the AI processing logic. The responsibility of fetching commits is now handled by `commitFetcher.ts`, while `commitAIProcessor.ts` is transformed into `commitAIProcessorAgent.ts`, a more generic agent-based model with tools. This architectural shift includes the introduction of `json-local-cache.ts` for local caching. This refactor impacts several files including `commitFetcher.ts`, which receives the fetching responsibilities, and `commitAIProcessorAgent.ts` which takes the responsibility of processing the data. Other files such as `commitSummary.ts`, `index.ts`, `package.json`, `schemas.ts`, `types/commit.ts`, and `utils.ts` are also modified to accommodate the new structure.","called_tools":[]},"summaries:":{"changes":[{"type":"feature","description":"Introduced a new AI-powered report generation feature. This includes a new `reportAIGenerator.ts` file, which handles the logic for generating reports using AI. The `index.ts` file was also modified to incorporate the new functionality."},{"type":"feature","description":"Implemented a local JSON caching mechanism using `json-local-cache.ts`. This cache is used to store and retrieve data, potentially for API responses, to improve performance by reducing the need for repeated requests."},{"type":"refactor","description":"Refactored the commit processing logic. Modified the `commitAIProcessorAgent.ts`, `commitFetcher.ts`, `commitSummary.ts` and `utils.ts` files to improve efficiency and maintainability. This might include changes in function calls, data structures, or control flows."},{"type":"refactor","description":"Updated the way prompts are handled, `prompts.ts` was updated"},{"type":"refactor","description":"Modified `reportGenerator.ts` to adjust how reports are generated. This change could involve changes to the formatting or content of the reports or the overall report generation process"},{"type":"feature","description":"Added schemas in `schemas.ts`. This file contains schema definitions likely used for data validation or data interpretation by other parts of the application."}],"summary":"This commit introduces a major new feature: AI-powered report generation, which is supported by new AI related file and cached data. Furthermore, this commit includes significant refactoring of the commit processing and report generation logic, potentially leading to efficiency improvements and enhanced code maintainability.  The addition of schemas suggests that data validation is an important aspect of the new features. Several files have been updated for this refactor. The json local cache has been introduced.","called_tools":[]},"reports:2024-12-22":{"date":"2024-12-22T00:00:00Z","bulletPoints":[{"short":"Implemented AI-powered report generator","long":"Developed and integrated a new AI-powered report generator. This involved creating the core logic in `reportAIGenerator.ts`, which uses other modules to generate reports based on commit data. Significant modifications were made to `index.ts` to incorporate this feature. Additionally, changes were made in `commitAIProcessorAgent.ts`, `json-local-cache.ts`, `prompts.ts`, `reportGenerator.ts`, `schemas.ts`, `utils.ts`, `commitFetcher.ts`, and `commitSummary.ts` to ensure the new AI report generator functions as intended. This is a major step towards automating report generation using AI."}]},"reports:2024-12-21":{"date":"2024-12-21T12:00:00Z","bulletPoints":[{"short":"Refactored index.ts into separate files","long":"The `index.ts` file was refactored by separating its code into multiple files. Code related to fetching commits was moved to `commitFetcher.ts`, prompts were moved to `prompts.ts`, and types were moved to `types.ts`. This improves code organization and maintainability. The main `index.ts` file now orchestrates the application."},{"short":"Added filtering by username and date range","long":"Implemented a new feature that allows users to filter commits by username and date range after being prompted to enter their desired filters. This functionality was primarily implemented in `commitFetcher.ts` and `index.ts`."},{"short":"Improved stderr handling","long":"Improved error handling, specifically related to stderr. The core fix is in `commitFetcher.ts`, with minor changes in `index.ts`, to correctly manage and process error messages during commit fetching."},{"short":"Fixed path parameter for local repositories","long":"Addressed an issue regarding the path parameter used for fetching commits to support various local repositories. The changes were made in `commitAIProcessorAgent.ts`, `commitFetcher.ts`, `commitSummary.ts`, and `index.ts`."},{"short":"Refactored fetching logic and commit AI processor","long":"Refactored the commit processing logic by decoupling the fetching of commit data from the AI processing logic. Fetching commits is now handled by `commitFetcher.ts`, while `commitAIProcessor.ts` is now an agent-based model with tools called `commitAIProcessorAgent.ts`. `json-local-cache.ts` was also introduced for local caching."}]}}